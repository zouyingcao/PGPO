.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "I7 1"
.TH I7 1 "2018-05-29" "perl v5.24.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "i7"
.IX Header "i7"
i7 \- Interactive shell for Inform 7 compiler
.PP
i7
.PP
i7 allows the creation and compilation of Interactive Fiction works
written in the Inform 7 programming language by Graham Nelson.
.IP "Interactive Invocation" 4
.IX Item "Interactive Invocation"
i7 [ \-f story-dir ]
.Sp
Invoke \*(L"i7\*(R" with no options, and then choose whether to begin a new
story or to work with an existing story.  You will be prompted for the
name of the directory that is the root of your story project.  Don't
go too crazy with the name of the directory: spaces are fine, but
quotation marks, the pipe character, and shell metacharacters like \*(L"*\*(R"
and \*(L"?\*(R" are not a good idea.
.Sp
If you supply the \-f option and then the name of a directory (typically
ending in .inform) that contains your story file, Inform will behave as if
you selected to work with that directory as your existing story 
location.
.Sp
If a new story is chosen, the appropriate directory structures and
\&\s-1UUID\s0 will be created for the story file.  For an existing story, the
directory given will be checked for the \s-1UUID\s0 file, and if it is not
found, i7 will complain.
.Sp
Once a story directory has been set, i7 will move on to its main
screen.  From here you may change story settings (unfortunately,
settings are not yet saved, so you have to do this on each i7
invocation), compile your story, or release it.
.Sp
From here, you should edit your story file
\&\fIproject-directory\fR/Source/story.ni as you desire.
.Sp
If you have your \s-1VISUAL\s0 or \s-1EDITOR\s0 environment variables described, or
/usr/bin/editor exists, or /bin/ed exists, or you set your preferred
editor from the \s-1IDE\s0 preference panels, then the Inform 7 environment
will allow you the ability to edit your story from the i7 interface.
Otherwise, just open the story in your favorite editor.
.Sp
Save your story and then choose Compile.  i7 will tell you where the
output is (\fIproject-directory\fR/Build/output.\fIsuffix\fR, where
\&\fIsuffix\fR is usually \*(L"ulx\*(R", but may be \*(L"z5\*(R", \*(L"z6\*(R", \*(L"z8\*(R", or \*(L"ulx\*(R"
depending on compilation options.
.Sp
If you prefer, you can Go, which compiles and then runs your story.
The interpreter invoked has no dependencies other than stdio, which
makes it very portable, but if you want your game to look nice, you
can play it in any other interpreter as directed by the Compile
option, or you can set other interpreters in the \s-1IDE\s0 preference panel.
.Sp
You can toggle blorb compilation for both Go and Compile if you like, and
a blorb file will be created next to the zcode/ulx file.
.Sp
When you are ready to release your story, choose Release, and i7 will
tell you where the blorb (or zcode/ulx, if you chose \*(L"Do not package
as Blorb\*(R" as a setting) output can be found.
.IP "Noninteractive Invocation" 4
.IX Item "Noninteractive Invocation"
i7 [\-h] [\-v] [\-p prefix] [\-s setting1=value1[,s2=v2...]] \-c story-directory
.Sp
i7 [\-h] [\-v] [\-p prefix] [\-s setting1=value1[,s2=v2...]] \-r story-directory
.Sp
If invoked with the \-h option, i7 will display this help message and then
exit.
.Sp
If invoked with the \-v option, i7 will display the version number and then 
exit.
.Sp
If invoked with the \-c or \-r options, i7 will compile or release your story
noninteractively.  If you installed Inform 7 somewhere other than 
/usr/local/share/inform7, you can specify the installation location with the
\&\-p option; if you want to set any compilation settings, you can do so with the
\&\-s option.
.Sp
Supported settings are \*(L"blorb\*(R" with options of \*(L"1\*(R" or \*(L"0\*(R" (that is, do or 
do not package the output with blorb), and \*(L"zcode\*(R" with options of \*(L"8\*(R"
(meaning compile to z8) or  256\*(L" or \*(R"g" (meaning compile to Glulx).
.Sp
It is hoped that noninteractive modes will be useful to authors of Inform 7
IDEs.  A return code of 0 means that the compile or release succeeded;
anything else signifies failure.
.IP "What i7 is" 4
.IX Item "What i7 is"
I7 is intended as an utterly barebones Inform 7 development system.
All it really does is generate a \s-1UUID\s0 for the project and invoke the
appropriate compilers when asked.
.Sp
Philip Chimento provides a \s-1GNOME\s0 port of I7, which is much to be preferred
in the likely event that you are using an x86 or x86_64\-based Linux system.
.Sp
This port of Inform 7 is deliberately intended to have minimal
requirements.  A Perl interpreter is needed to run the i7 shell.  It
is presumed that \f(CW\*(C`uuidgen\*(C'\fR is present somewhere on the user's path;
uuidgen is part of the e2fstools package and should be present on
almost every Linux system.  Other than that, the actual compilers
invoked are statically linked, and require only stdio for input and
output, as do the bundled z\-code and Glulx interpreters.
.IP "What is implemented" 4
.IX Item "What is implemented"
Compilation and Release are fully implemented.
.Sp
The Index is built and is available as files in
\&\fIproject-directory\fR/Index (and can be reached via the (I)ndex
function if a browser is appropriately set, although since the inform:
\&\s-1URL\s0 type is not implemented, the icons will all be missing, and since
the source: type is not implemented either, links to portions of the
source text also will not work).
.Sp
Any problems during compilation can be found in
\&\fIproject-directory\fR/Build/Problems.html.
.Sp
Story preferences are saved, and will be respected if you move your
game to a different platform.  \s-1IDE\s0 preferences are saved globally, but
are not respected on other platforms (which generally use their own
built-in editors and interpreters in any event).
.IP "What is not implemented" 4
.IX Item "What is not implemented"
The Skein and the Transcript are not implemented at all.  There is no
\&\*(L"Replay\*(R" function.  Although preferences are
saved, the preference save files are not understood by other Inform 7
ports; nor does this port understand their preferences file.
.Sp
Only Inform 7 story projects are implemented.  You will have to put your own
\&\*(L"begins here\*(R" and \*(L"ends here\*(R" markers around extensions you write, and
there is no support for Inform 6 story creation.
.IP "License" 4
.IX Item "License"
The i7 interface for Linux \s-1CLI\s0 is licensed under the GPLv3:
https://www.gnu.org/licenses/gpl\-3.0.html
.IP "Problems, Suggestions, and So Forth" 4
.IX Item "Problems, Suggestions, and So Forth"
If you have difficulty installing i7 for Linux, please feel free to
write to Adam Thornton at \f(CW\*(C`athornton@gmail.com\*(C'\fR.  Likewise, if i7 chokes 
at some place other than compiling your sources, let Adam know.
.Sp
If you need help with the Inform 7 language, the newsgroup
rec.arts.int\-fiction is the right place to start.
.Sp
If you feel that the interface for i7 is horrifically bad and ought to
be scrapped, you're exactly right.  There's no need to tell Adam: he
knows.  Now that you have the native command-line tools, though,
there's no reason for you \fInot\fR to implement an interface that's the
functional equivalent of the Mac \s-1OS X,\s0 Windows, or \s-1GNOME\s0 versions.  Please
feel free to do so!
