#!/usr/bin/env python

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.

from __future__ import annotations

from typing import Any
from dataclasses import dataclass

from tatsu.objectmodel import Node
from tatsu.semantics import ModelBuilderSemantics


@dataclass(eq=False)
class ModelBase(Node):
    pass


class PddlLogicModelBuilderSemantics(ModelBuilderSemantics):
    def __init__(self, context=None, types=None):
        types = [
            t for t in globals().values()
            if type(t) is type and issubclass(t, ModelBase)
        ] + (types or [])
        super().__init__(context=context, types=types)


@dataclass(eq=False)
class ActionTemplateNode(ModelBase):
    template: Any = None


@dataclass(eq=False)
class ActionFeedbackNode(ModelBase):
    name: Any = None


@dataclass(eq=False)
class ActionPddlNode(ModelBase):
    code: Any = None


@dataclass(eq=False)
class ActionGrammarNode(ModelBase):
    code: Any = None


@dataclass(eq=False)
class ActionTypeNode(ModelBase):
    feedback: Any = None
    grammar: Any = None
    name: Any = None
    pddl: Any = None
    template: Any = None


@dataclass(eq=False)
class PddlDocumentNode(ModelBase):
    parts: Any = None
